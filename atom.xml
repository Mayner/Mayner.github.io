<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mayner&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/1e4d984d6da30ace22c49eb2e5a6eb08</icon>
  <subtitle>Web前端技术沉淀</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mayner.github.io/"/>
  <updated>2018-09-25T08:37:24.107Z</updated>
  <id>https://mayner.github.io/</id>
  
  <author>
    <name>Mayner</name>
    <email>meiningzhu@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于vue-cli脚手架搭建的单页面应用上进行的多页面应用配置</title>
    <link href="https://mayner.github.io/20180925/%E5%9F%BA%E4%BA%8Evue-cli%E8%84%9A%E6%89%8B%E6%9E%B6%E6%90%AD%E5%BB%BA%E7%9A%84%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8%E4%B8%8A%E8%BF%9B%E8%A1%8C%E7%9A%84%E5%A4%9A%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8%E9%85%8D%E7%BD%AE.html"/>
    <id>https://mayner.github.io/20180925/基于vue-cli脚手架搭建的单页面应用上进行的多页面应用配置.html</id>
    <published>2018-09-25T08:23:02.000Z</published>
    <updated>2018-09-25T08:37:24.107Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li><p>全局安装<code>vue-cli</code>，并使用<code>vue-cli</code>快速搭建vue项目，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm vue-cli -g</span><br><span class="line">vue init webpack xxx    // (注释：xxx即自己的工程名称)</span><br></pre></td></tr></table></figure></li><li><p>生成的项目目录结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">├─build</span><br><span class="line">├─config</span><br><span class="line">├─src</span><br><span class="line">│  ├─assets</span><br><span class="line">│  ├─components</span><br><span class="line">│  └─router</span><br><span class="line">└─static</span><br></pre></td></tr></table></figure></li><li><p>在<code>src</code>目录下新建一个文件夹<code>pages</code>，<code>pages</code>目录是用来存放你的多页面应用，这里我建了三个页面应用，分别是<code>index</code>、<code>goods</code>和<code>user</code>，示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">├─assets</span><br><span class="line">├─components</span><br><span class="line">├─pages</span><br><span class="line">│  ├─goods</span><br><span class="line">│  ├─index</span><br><span class="line">│  └─user</span><br><span class="line">└─router</span><br></pre></td></tr></table></figure></li><li><p>以上三个页面应用均由三个文件构成，分别是<code>.html</code>，<code>.js</code>和<code>.vue</code>文件。需要注意的一点：每个页面目录下的<code>.html</code>和<code>.js</code>的文件名应相同，且每个页面目录之间互不相同，以便于<code>webpack</code>编译打包时能区分开，示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├─assets</span><br><span class="line">├─components</span><br><span class="line">├─pages</span><br><span class="line">│  ├─goods</span><br><span class="line">│  │  ├─goods.index.html    // 模板源文件</span><br><span class="line">│  │  ├─goods.index.js      // 入口js文件</span><br><span class="line">│  │  └─Goods.vue</span><br><span class="line">│  ├─index</span><br><span class="line">│  │  ├─index.html          // 模板源文件</span><br><span class="line">│  │  ├─index.js            // 入口js文件</span><br><span class="line">│  │  └─App.vue</span><br><span class="line">│  └─user</span><br><span class="line">│     ├─user.index.html     // 模板源文件</span><br><span class="line">│     ├─user.index.js       // 入口js文件</span><br><span class="line">│     └─User.vue</span><br><span class="line">└─router</span><br></pre></td></tr></table></figure></li><li><p>此处的<code>.html</code>文件是作为<code>webpack</code>打包的模板<code>html</code>源文件，该文件的内容与工程根目录<code>vue-multipage-config</code>下的<code>index.html</code>相同，可以直接拷贝；而<code>.js</code>则是打包的入口js文件，亦直接拷贝<code>src</code>目录下的<code>main.js</code>文件的内容，别忘了将<code>vue</code>实例里的<code>template</code>的值改为对应的模块文件，这里选<code>goods.index.js</code>举例，示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// goods.index.js文件</span><br><span class="line"></span><br><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import Goods from &apos;./Goods&apos; // 进入Goods.vue</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#app&apos;,</span><br><span class="line">  router,</span><br><span class="line">  components: &#123; Goods &#125;,    // 注册Goods组件</span><br><span class="line">  template: &apos;&lt;Goods/&gt;&apos;      // 改成&lt;Goods/&gt;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>以上准备工作做好，接下来是如何进行多页面应用的配置。</p></li></ul><h2 id="webpack配置"><a href="#webpack配置" class="headerlink" title="webpack配置"></a>webpack配置</h2><ul><li>在<code>package.json</code>文件的<code>devDependencies</code>中添加<code>&quot;glob&quot;: &quot;^7.1.3&quot;</code>这个第三方依赖。</li><li>以下直接贴出需要改动的四个配置文件，里面修改或添加的地方均已写注释。</li></ul><h3 id="utils-js文件的修改"><a href="#utils-js文件的修改" class="headerlink" title="utils.js文件的修改"></a>utils.js文件的修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;</span><br><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">const config = require(&apos;../config&apos;)</span><br><span class="line">const ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;)</span><br><span class="line">const packageConfig = require(&apos;../package.json&apos;)</span><br><span class="line"></span><br><span class="line">/* 此处添加引进三个模块=================开始================= */</span><br><span class="line">// 1、glob模块允许你使用 *等符号, 例如lib/*.js就是获取lib文件夹下的所有js后缀名的文件</span><br><span class="line">const glob = require(&apos;glob&apos;)</span><br><span class="line">// 2、html-webpack-plugin模块根据页面模板生成html</span><br><span class="line">const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)</span><br><span class="line">// 3、webpack-merge模块用于做相应的合并处理</span><br><span class="line">const merge = require(&apos;webpack-merge&apos;)</span><br><span class="line">/* 此处添加引进三个模块=================结束================= */</span><br><span class="line"></span><br><span class="line">exports.assetsPath = function (_path) &#123;</span><br><span class="line">  const assetsSubDirectory = process.env.NODE_ENV === &apos;production&apos;</span><br><span class="line">    ? config.build.assetsSubDirectory</span><br><span class="line">    : config.dev.assetsSubDirectory</span><br><span class="line"></span><br><span class="line">  return path.posix.join(assetsSubDirectory, _path)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.cssLoaders = function (options) &#123;</span><br><span class="line">  options = options || &#123;&#125;</span><br><span class="line"></span><br><span class="line">  const cssLoader = &#123;</span><br><span class="line">    loader: &apos;css-loader&apos;,</span><br><span class="line">    options: &#123;</span><br><span class="line">      sourceMap: options.sourceMap</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const postcssLoader = &#123;</span><br><span class="line">    loader: &apos;postcss-loader&apos;,</span><br><span class="line">    options: &#123;</span><br><span class="line">      sourceMap: options.sourceMap</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // generate loader string to be used with extract text plugin</span><br><span class="line">  function generateLoaders (loader, loaderOptions) &#123;</span><br><span class="line">    const loaders = options.usePostCSS ? [cssLoader, postcssLoader] : [cssLoader]</span><br><span class="line"></span><br><span class="line">    if (loader) &#123;</span><br><span class="line">      loaders.push(&#123;</span><br><span class="line">        loader: loader + &apos;-loader&apos;,</span><br><span class="line">        options: Object.assign(&#123;&#125;, loaderOptions, &#123;</span><br><span class="line">          sourceMap: options.sourceMap</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Extract CSS when that option is specified</span><br><span class="line">    // (which is the case during production build)</span><br><span class="line">    if (options.extract) &#123;</span><br><span class="line">      return ExtractTextPlugin.extract(&#123;</span><br><span class="line">        use: loaders,</span><br><span class="line">        fallback: &apos;vue-style-loader&apos;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      return [&apos;vue-style-loader&apos;].concat(loaders)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // https://vue-loader.vuejs.org/en/configurations/extract-css.html</span><br><span class="line">  return &#123;</span><br><span class="line">    css: generateLoaders(),</span><br><span class="line">    postcss: generateLoaders(),</span><br><span class="line">    less: generateLoaders(&apos;less&apos;),</span><br><span class="line">    sass: generateLoaders(&apos;sass&apos;, &#123; indentedSyntax: true &#125;),</span><br><span class="line">    scss: generateLoaders(&apos;sass&apos;),</span><br><span class="line">    stylus: generateLoaders(&apos;stylus&apos;),</span><br><span class="line">    styl: generateLoaders(&apos;stylus&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Generate loaders for standalone style files (outside of .vue)</span><br><span class="line">exports.styleLoaders = function (options) &#123;</span><br><span class="line">  const output = []</span><br><span class="line">  const loaders = exports.cssLoaders(options)</span><br><span class="line"></span><br><span class="line">  for (const extension in loaders) &#123;</span><br><span class="line">    const loader = loaders[extension]</span><br><span class="line">    output.push(&#123;</span><br><span class="line">      test: new RegExp(&apos;\\.&apos; + extension + &apos;$&apos;),</span><br><span class="line">      use: loader</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return output</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 此处是添加多页面配置的部分=================开始================= */</span><br><span class="line"></span><br><span class="line">// 取得多页面项目的根目录，一般放在src文件夹下的pages文件夹</span><br><span class="line">const PAGE_PATH = path.join(__dirname, &apos;..&apos;, &apos;src/pages&apos;)</span><br><span class="line"></span><br><span class="line">// 多入口js配置</span><br><span class="line">exports.entries = function () &#123;</span><br><span class="line">  // 通过glob模块读取pages文件夹下的所有对应文件夹下的js后缀文件，如果该文件存在，那么就作为入口处理</span><br><span class="line">  let entryFiles = glob.sync(PAGE_PATH + &apos;/*/*.js&apos;)</span><br><span class="line">  let entriesObj = &#123;&#125;</span><br><span class="line">  entryFiles.forEach(filePath =&gt; &#123;</span><br><span class="line">    let filename = filePath.substring(filePath.lastIndexOf(&apos;\/&apos;) + 1, filePath.lastIndexOf(&apos;.&apos;))</span><br><span class="line">    entriesObj[filename] = filePath</span><br><span class="line">  &#125;)</span><br><span class="line">  return entriesObj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 多页面输出配置</span><br><span class="line">exports.htmlPlugins = function () &#123;</span><br><span class="line">  // 与上面的多页面入口配置相同，读取pages文件夹下的对应的html后缀文件，然后放入数组中</span><br><span class="line">  let entryHtml = glob.sync(PAGE_PATH + &apos;/*/*.html&apos;)</span><br><span class="line">  let arr = []</span><br><span class="line">  entryHtml.forEach(filePath =&gt; &#123;</span><br><span class="line">    let filename = filePath.substring(filePath.lastIndexOf(&apos;\/&apos;) + 1, filePath.lastIndexOf(&apos;.&apos;))</span><br><span class="line">    let conf = &#123;</span><br><span class="line">      // 产出到dist目录下的入口html的文件名</span><br><span class="line">      filename: filename + &apos;.html&apos;,</span><br><span class="line">      // 多页面入口html模板来源</span><br><span class="line">      template: filePath,</span><br><span class="line">      inject: true,</span><br><span class="line">      // 页面模板需要加对应的js脚本，如果不加chunks这句代码则每个页面都会引入所有的js脚本</span><br><span class="line">      // 此处的filename必须跟上面的多页面入口配置entries里的filename相一致，</span><br><span class="line">      // 即pages文件夹里各个模块的入口html模板和js的文件名必须相同</span><br><span class="line">      chunks: [&apos;manifest&apos;, &apos;vendor&apos;, filename]</span><br><span class="line">    &#125;</span><br><span class="line">    if (process.env.NODE_ENV === &apos;production&apos;) &#123;</span><br><span class="line">      conf = merge(conf, &#123;</span><br><span class="line">        minify: &#123;</span><br><span class="line">          removeComments: true,</span><br><span class="line">          collapseWhitespace: true,</span><br><span class="line">          removeAttributeQuotes: true</span><br><span class="line">        &#125;,</span><br><span class="line">        chunksSortMode: &apos;dependency&apos;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    arr.push(new HtmlWebpackPlugin(conf))</span><br><span class="line">  &#125;)</span><br><span class="line">  return arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 此处是添加多页面配置的部分=================结束================= */</span><br><span class="line"></span><br><span class="line">exports.createNotifierCallback = () =&gt; &#123;</span><br><span class="line">  const notifier = require(&apos;node-notifier&apos;)</span><br><span class="line"></span><br><span class="line">  return (severity, errors) =&gt; &#123;</span><br><span class="line">    if (severity !== &apos;error&apos;) return</span><br><span class="line"></span><br><span class="line">    const error = errors[0]</span><br><span class="line">    const filename = error.file &amp;&amp; error.file.split(&apos;!&apos;).pop()</span><br><span class="line"></span><br><span class="line">    notifier.notify(&#123;</span><br><span class="line">      title: packageConfig.name,</span><br><span class="line">      message: severity + &apos;: &apos; + error.name,</span><br><span class="line">      subtitle: filename || &apos;&apos;,</span><br><span class="line">      icon: path.join(__dirname, &apos;logo.png&apos;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="webpack-base-conf-js文件的修改"><a href="#webpack-base-conf-js文件的修改" class="headerlink" title="webpack.base.conf.js文件的修改"></a>webpack.base.conf.js文件的修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;</span><br><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">const utils = require(&apos;./utils&apos;)</span><br><span class="line">const config = require(&apos;../config&apos;)</span><br><span class="line">const vueLoaderConfig = require(&apos;./vue-loader.conf&apos;)</span><br><span class="line"></span><br><span class="line">function resolve (dir) &#123;</span><br><span class="line">  return path.join(__dirname, &apos;..&apos;, dir)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const createLintingRule = () =&gt; (&#123;</span><br><span class="line">  test: /\.(js|vue)$/,</span><br><span class="line">  loader: &apos;eslint-loader&apos;,</span><br><span class="line">  enforce: &apos;pre&apos;,</span><br><span class="line">  include: [resolve(&apos;src&apos;), resolve(&apos;test&apos;)],</span><br><span class="line">  options: &#123;</span><br><span class="line">    formatter: require(&apos;eslint-friendly-formatter&apos;),</span><br><span class="line">    emitWarning: !config.dev.showEslintErrorsInOverlay</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  context: path.resolve(__dirname, &apos;../&apos;),</span><br><span class="line">  /* 此处由单入口修改为多入口=================开始================= */</span><br><span class="line">  entry: utils.entries(),</span><br><span class="line">  /* 此处由单入口修改为多入口=================结束================= */</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: config.build.assetsRoot,</span><br><span class="line">    filename: &apos;[name].js&apos;,  // 此处的name取的就是entry对象里面的key名</span><br><span class="line">    publicPath: process.env.NODE_ENV === &apos;production&apos;</span><br><span class="line">      ? config.build.assetsPublicPath</span><br><span class="line">      : config.dev.assetsPublicPath</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [&apos;.js&apos;, &apos;.vue&apos;, &apos;.json&apos;],</span><br><span class="line">    alias: &#123;</span><br><span class="line">      &apos;vue$&apos;: &apos;vue/dist/vue.esm.js&apos;,</span><br><span class="line">      &apos;@&apos;: resolve(&apos;src&apos;),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      ...(config.dev.useEslint ? [createLintingRule()] : []),</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.vue$/,</span><br><span class="line">        loader: &apos;vue-loader&apos;,</span><br><span class="line">        options: vueLoaderConfig</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        loader: &apos;babel-loader&apos;,</span><br><span class="line">        include: [resolve(&apos;src&apos;), resolve(&apos;test&apos;), resolve(&apos;node_modules/webpack-dev-server/client&apos;)]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(png|jpe?g|gif|svg)(\?.*)?$/,</span><br><span class="line">        loader: &apos;url-loader&apos;,</span><br><span class="line">        options: &#123;</span><br><span class="line">          limit: 10000,</span><br><span class="line">          name: utils.assetsPath(&apos;img/[name].[hash:7].[ext]&apos;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(mp4|webm|ogg|mp3|wav|flac|aac)(\?.*)?$/,</span><br><span class="line">        loader: &apos;url-loader&apos;,</span><br><span class="line">        options: &#123;</span><br><span class="line">          limit: 10000,</span><br><span class="line">          name: utils.assetsPath(&apos;media/[name].[hash:7].[ext]&apos;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.(woff2?|eot|ttf|otf)(\?.*)?$/,</span><br><span class="line">        loader: &apos;url-loader&apos;,</span><br><span class="line">        options: &#123;</span><br><span class="line">          limit: 10000,</span><br><span class="line">          name: utils.assetsPath(&apos;fonts/[name].[hash:7].[ext]&apos;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  node: &#123;</span><br><span class="line">    // prevent webpack from injecting useless setImmediate polyfill because Vue</span><br><span class="line">    // source contains it (although only uses it if it&apos;s native).</span><br><span class="line">    setImmediate: false,</span><br><span class="line">    // prevent webpack from injecting mocks to Node native modules</span><br><span class="line">    // that does not make sense for the client</span><br><span class="line">    dgram: &apos;empty&apos;,</span><br><span class="line">    fs: &apos;empty&apos;,</span><br><span class="line">    net: &apos;empty&apos;,</span><br><span class="line">    tls: &apos;empty&apos;,</span><br><span class="line">    child_process: &apos;empty&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="webpack-dev-conf-js的修改"><a href="#webpack-dev-conf-js的修改" class="headerlink" title="webpack.dev.conf.js的修改"></a>webpack.dev.conf.js的修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;</span><br><span class="line">const utils = require(&apos;./utils&apos;)</span><br><span class="line">const webpack = require(&apos;webpack&apos;)</span><br><span class="line">const config = require(&apos;../config&apos;)</span><br><span class="line">const merge = require(&apos;webpack-merge&apos;)</span><br><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">const baseWebpackConfig = require(&apos;./webpack.base.conf&apos;)</span><br><span class="line">const CopyWebpackPlugin = require(&apos;copy-webpack-plugin&apos;)</span><br><span class="line">// const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;) // 因为已将该模块提取到utils中使用，故此处不再需要</span><br><span class="line">const FriendlyErrorsPlugin = require(&apos;friendly-errors-webpack-plugin&apos;)</span><br><span class="line">const portfinder = require(&apos;portfinder&apos;)</span><br><span class="line"></span><br><span class="line">const HOST = process.env.HOST</span><br><span class="line">const PORT = process.env.PORT &amp;&amp; Number(process.env.PORT)</span><br><span class="line"></span><br><span class="line">const devWebpackConfig = merge(baseWebpackConfig, &#123;</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: utils.styleLoaders(&#123; sourceMap: config.dev.cssSourceMap, usePostCSS: true &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  // cheap-module-eval-source-map is faster for development</span><br><span class="line">  devtool: config.dev.devtool,</span><br><span class="line"></span><br><span class="line">  // these devServer options should be customized in /config/index.js</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    clientLogLevel: &apos;warning&apos;,</span><br><span class="line">    historyApiFallback: &#123;</span><br><span class="line">      rewrites: [</span><br><span class="line">        &#123; from: /.*/, to: path.posix.join(config.dev.assetsPublicPath, &apos;index.html&apos;) &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    hot: true,</span><br><span class="line">    contentBase: false, // since we use CopyWebpackPlugin.</span><br><span class="line">    compress: true,</span><br><span class="line">    host: HOST || config.dev.host,</span><br><span class="line">    port: PORT || config.dev.port,</span><br><span class="line">    open: config.dev.autoOpenBrowser,</span><br><span class="line">    overlay: config.dev.errorOverlay</span><br><span class="line">      ? &#123; warnings: false, errors: true &#125;</span><br><span class="line">      : false,</span><br><span class="line">    publicPath: config.dev.assetsPublicPath,</span><br><span class="line">    proxy: config.dev.proxyTable,</span><br><span class="line">    quiet: true, // necessary for FriendlyErrorsPlugin</span><br><span class="line">    watchOptions: &#123;</span><br><span class="line">      poll: config.dev.poll,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new webpack.DefinePlugin(&#123;</span><br><span class="line">      &apos;process.env&apos;: require(&apos;../config/dev.env&apos;)</span><br><span class="line">    &#125;),</span><br><span class="line">    new webpack.HotModuleReplacementPlugin(),</span><br><span class="line">    new webpack.NamedModulesPlugin(), // HMR shows correct file names in console on update.</span><br><span class="line">    new webpack.NoEmitOnErrorsPlugin(),</span><br><span class="line">    // https://github.com/ampedandwired/html-webpack-plugin</span><br><span class="line"></span><br><span class="line">    /* 将此处注释掉=================开始================= */</span><br><span class="line">    // new HtmlWebpackPlugin(&#123;</span><br><span class="line">    //   filename: &apos;index.html&apos;,</span><br><span class="line">    //   template: &apos;index.html&apos;,</span><br><span class="line">    //   inject: true</span><br><span class="line">    // &#125;),</span><br><span class="line">    /* 将此处注释掉=================结束================= */</span><br><span class="line"></span><br><span class="line">    // copy custom static assets</span><br><span class="line">    new CopyWebpackPlugin([</span><br><span class="line">      &#123;</span><br><span class="line">        from: path.resolve(__dirname, &apos;../static&apos;),</span><br><span class="line">        to: config.dev.assetsSubDirectory,</span><br><span class="line">        ignore: [&apos;.*&apos;]</span><br><span class="line">      &#125;</span><br><span class="line">    ])</span><br><span class="line">  ].concat(utils.htmlPlugins()) // 将utils中定义的多页面输出配置在此处用concat连接起来</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">module.exports = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  portfinder.basePort = process.env.PORT || config.dev.port</span><br><span class="line">  portfinder.getPort((err, port) =&gt; &#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">      reject(err)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      // publish the new Port, necessary for e2e tests</span><br><span class="line">      process.env.PORT = port</span><br><span class="line">      // add port to devServer config</span><br><span class="line">      devWebpackConfig.devServer.port = port</span><br><span class="line"></span><br><span class="line">      // Add FriendlyErrorsPlugin</span><br><span class="line">      devWebpackConfig.plugins.push(new FriendlyErrorsPlugin(&#123;</span><br><span class="line">        compilationSuccessInfo: &#123;</span><br><span class="line">          messages: [`Your application is running here: http://$&#123;devWebpackConfig.devServer.host&#125;:$&#123;port&#125;`],</span><br><span class="line">        &#125;,</span><br><span class="line">        onErrors: config.dev.notifyOnErrors</span><br><span class="line">        ? utils.createNotifierCallback()</span><br><span class="line">        : undefined</span><br><span class="line">      &#125;))</span><br><span class="line"></span><br><span class="line">      resolve(devWebpackConfig)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="webpack-prod-conf-js的修改"><a href="#webpack-prod-conf-js的修改" class="headerlink" title="webpack.prod.conf.js的修改"></a>webpack.prod.conf.js的修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;</span><br><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">const utils = require(&apos;./utils&apos;)</span><br><span class="line">const webpack = require(&apos;webpack&apos;)</span><br><span class="line">const config = require(&apos;../config&apos;)</span><br><span class="line">const merge = require(&apos;webpack-merge&apos;)</span><br><span class="line">const baseWebpackConfig = require(&apos;./webpack.base.conf&apos;)</span><br><span class="line">const CopyWebpackPlugin = require(&apos;copy-webpack-plugin&apos;)</span><br><span class="line">// const HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;) // 因为已将该模块提取到utils中使用，故此处不再需要</span><br><span class="line">const ExtractTextPlugin = require(&apos;extract-text-webpack-plugin&apos;)</span><br><span class="line">const OptimizeCSSPlugin = require(&apos;optimize-css-assets-webpack-plugin&apos;)</span><br><span class="line">const UglifyJsPlugin = require(&apos;uglifyjs-webpack-plugin&apos;)</span><br><span class="line"></span><br><span class="line">const env = require(&apos;../config/prod.env&apos;)</span><br><span class="line"></span><br><span class="line">const webpackConfig = merge(baseWebpackConfig, &#123;</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: utils.styleLoaders(&#123;</span><br><span class="line">      sourceMap: config.build.productionSourceMap,</span><br><span class="line">      extract: true,</span><br><span class="line">      usePostCSS: true</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  devtool: config.build.productionSourceMap ? config.build.devtool : false,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: config.build.assetsRoot,</span><br><span class="line">    filename: utils.assetsPath(&apos;js/[name].[chunkhash].js&apos;),</span><br><span class="line">    chunkFilename: utils.assetsPath(&apos;js/[id].[chunkhash].js&apos;)</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    // http://vuejs.github.io/vue-loader/en/workflow/production.html</span><br><span class="line">    new webpack.DefinePlugin(&#123;</span><br><span class="line">      &apos;process.env&apos;: env</span><br><span class="line">    &#125;),</span><br><span class="line">    new UglifyJsPlugin(&#123;</span><br><span class="line">      uglifyOptions: &#123;</span><br><span class="line">        compress: &#123;</span><br><span class="line">          warnings: false</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      sourceMap: config.build.productionSourceMap,</span><br><span class="line">      parallel: true</span><br><span class="line">    &#125;),</span><br><span class="line">    // extract css into its own file</span><br><span class="line">    new ExtractTextPlugin(&#123;</span><br><span class="line">      filename: utils.assetsPath(&apos;css/[name].[contenthash].css&apos;),</span><br><span class="line">      // Setting the following option to `false` will not extract CSS from codesplit chunks.</span><br><span class="line">      // Their CSS will instead be inserted dynamically with style-loader when the codesplit chunk has been loaded by webpack.</span><br><span class="line">      // It&apos;s currently set to `true` because we are seeing that sourcemaps are included in the codesplit bundle as well when it&apos;s `false`, </span><br><span class="line">      // increasing file size: https://github.com/vuejs-templates/webpack/issues/1110</span><br><span class="line">      allChunks: true,</span><br><span class="line">    &#125;),</span><br><span class="line">    // Compress extracted CSS. We are using this plugin so that possible</span><br><span class="line">    // duplicated CSS from different components can be deduped.</span><br><span class="line">    new OptimizeCSSPlugin(&#123;</span><br><span class="line">      cssProcessorOptions: config.build.productionSourceMap</span><br><span class="line">        ? &#123; safe: true, map: &#123; inline: false &#125; &#125;</span><br><span class="line">        : &#123; safe: true &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    // generate dist index.html with correct asset hash for caching.</span><br><span class="line">    // you can customize output by editing /index.html</span><br><span class="line">    // see https://github.com/ampedandwired/html-webpack-plugin</span><br><span class="line"></span><br><span class="line">    /* 将此处注释掉=================开始================= */</span><br><span class="line">    // new HtmlWebpackPlugin(&#123;</span><br><span class="line">    //   filename: config.build.index,</span><br><span class="line">    //   template: &apos;index.html&apos;,</span><br><span class="line">    //   inject: true,</span><br><span class="line">    //   minify: &#123;</span><br><span class="line">    //     removeComments: true,</span><br><span class="line">    //     collapseWhitespace: true,</span><br><span class="line">    //     removeAttributeQuotes: true</span><br><span class="line">    //     // more options:</span><br><span class="line">    //     // https://github.com/kangax/html-minifier#options-quick-reference</span><br><span class="line">    //   &#125;,</span><br><span class="line">    //   // necessary to consistently work with multiple chunks via CommonsChunkPlugin</span><br><span class="line">    //   chunksSortMode: &apos;dependency&apos;</span><br><span class="line">    // &#125;),</span><br><span class="line">    /* 将此处注释掉=================结束================= */</span><br><span class="line"></span><br><span class="line">    // keep module.id stable when vendor modules does not change</span><br><span class="line">    new webpack.HashedModuleIdsPlugin(),</span><br><span class="line">    // enable scope hoisting</span><br><span class="line">    new webpack.optimize.ModuleConcatenationPlugin(),</span><br><span class="line">    // split vendor js into its own file</span><br><span class="line">    new webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: &apos;vendor&apos;,</span><br><span class="line">      minChunks (module) &#123;</span><br><span class="line">        // any required modules inside node_modules are extracted to vendor</span><br><span class="line">        return (</span><br><span class="line">          module.resource &amp;&amp;</span><br><span class="line">          /\.js$/.test(module.resource) &amp;&amp;</span><br><span class="line">          module.resource.indexOf(</span><br><span class="line">            path.join(__dirname, &apos;../node_modules&apos;)</span><br><span class="line">          ) === 0</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    // extract webpack runtime and module manifest to its own file in order to</span><br><span class="line">    // prevent vendor hash from being updated whenever app bundle is updated</span><br><span class="line">    new webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: &apos;manifest&apos;,</span><br><span class="line">      minChunks: Infinity</span><br><span class="line">    &#125;),</span><br><span class="line">    // This instance extracts shared chunks from code splitted chunks and bundles them</span><br><span class="line">    // in a separate chunk, similar to the vendor chunk</span><br><span class="line">    // see: https://webpack.js.org/plugins/commons-chunk-plugin/#extra-async-commons-chunk</span><br><span class="line">    new webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: &apos;app&apos;,</span><br><span class="line">      async: &apos;vendor-async&apos;,</span><br><span class="line">      children: true,</span><br><span class="line">      minChunks: 3</span><br><span class="line">    &#125;),</span><br><span class="line"></span><br><span class="line">    // copy custom static assets</span><br><span class="line">    new CopyWebpackPlugin([</span><br><span class="line">      &#123;</span><br><span class="line">        from: path.resolve(__dirname, &apos;../static&apos;),</span><br><span class="line">        to: config.build.assetsSubDirectory,</span><br><span class="line">        ignore: [&apos;.*&apos;]</span><br><span class="line">      &#125;</span><br><span class="line">    ])</span><br><span class="line">  ].concat(utils.htmlPlugins()) // 将utils中定义的多页面输出配置在此处用concat连接起来</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">if (config.build.productionGzip) &#123;</span><br><span class="line">  const CompressionWebpackPlugin = require(&apos;compression-webpack-plugin&apos;)</span><br><span class="line"></span><br><span class="line">  webpackConfig.plugins.push(</span><br><span class="line">    new CompressionWebpackPlugin(&#123;</span><br><span class="line">      asset: &apos;[path].gz[query]&apos;,</span><br><span class="line">      algorithm: &apos;gzip&apos;,</span><br><span class="line">      test: new RegExp(</span><br><span class="line">        &apos;\\.(&apos; +</span><br><span class="line">        config.build.productionGzipExtensions.join(&apos;|&apos;) +</span><br><span class="line">        &apos;)$&apos;</span><br><span class="line">      ),</span><br><span class="line">      threshold: 10240,</span><br><span class="line">      minRatio: 0.8</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (config.build.bundleAnalyzerReport) &#123;</span><br><span class="line">  const BundleAnalyzerPlugin = require(&apos;webpack-bundle-analyzer&apos;).BundleAnalyzerPlugin</span><br><span class="line">  webpackConfig.plugins.push(new BundleAnalyzerPlugin())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = webpackConfig</span><br></pre></td></tr></table></figure><h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><p>分别对每个<code>.html</code>模板文件添加<code>a</code>标签进行跳转到另外两个页面，示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- index.html文件 --&gt;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&lt;a href=&quot;user.index.html&quot;&gt;跳转到用户主页&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;goods.index.html&quot;&gt;跳转到商品主页&lt;/a&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- goods.index.html文件 --&gt;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&lt;a href=&quot;index.html&quot;&gt;跳转到首页&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;user.index.html&quot;&gt;跳转到用户主页&lt;/a&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- user.index.html文件 --&gt;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&lt;a href=&quot;index.html&quot;&gt;跳转到首页&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;goods.index.html&quot;&gt;跳转到商品主页&lt;/a&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="开发环境运行"><a href="#开发环境运行" class="headerlink" title="开发环境运行"></a>开发环境运行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 进入vue-multipage-config目录</span><br><span class="line">cd vue-multipage-config</span><br><span class="line"></span><br><span class="line"># 安装所有依赖</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"># 开发环境启动项目,浏览器访问http://localhost:8080/</span><br><span class="line"># 默认访问的是目录/src/pages/index/下的index.html这个文件</span><br><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line"># 现在可以通过页面的点击按钮跳转到其它页面，注意观察跳转后的url地址</span><br><span class="line"># 比如跳转到商品主页，url地址变成了http://localhost:8080/goods.index.html#/</span><br><span class="line"># 而不是http://localhost:8080/#/goods.index.html</span><br><span class="line"></span><br><span class="line"># 因此，若手动输入url地址访问时需注意正确书写页面地址：</span><br><span class="line"># http://localhost:8080/goods.index.html#/</span><br></pre></td></tr></table></figure><h3 id="生产环境运行"><a href="#生产环境运行" class="headerlink" title="生产环境运行"></a>生产环境运行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 开发完成后执行打包命令，会在根目录生成dist文件夹</span><br><span class="line">npm run build</span><br><span class="line"></span><br><span class="line"># dist目录下的三个html文件便是webpack根据我们的配置生成的入口html文件</span><br><span class="line"></span><br><span class="line"># 不要在本地打开访问，请使用服务端访问文件</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;全局安装&lt;code&gt;vue-cli&lt;/code&gt;，并使用&lt;code&gt;vue-cli&lt;/code&gt;快速搭建v
      
    
    </summary>
    
    
      <category term="vue" scheme="https://mayner.github.io/tags/vue/"/>
    
      <category term="vue-multipage" scheme="https://mayner.github.io/tags/vue-multipage/"/>
    
      <category term="webpack" scheme="https://mayner.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>nvm安装总结</title>
    <link href="https://mayner.github.io/20180420/nvm-install.html"/>
    <id>https://mayner.github.io/20180420/nvm-install.html</id>
    <published>2018-04-20T10:11:27.000Z</published>
    <updated>2018-04-24T03:19:53.766Z</updated>
    
    <content type="html"><![CDATA[<p>一直以来都在用 nvm 来管理我的 node 的版本，然而，最近在尝试入坑快应用时，使用 <code>npm install -g hap-toolkit</code> 安装快应用脚手架，接着查看版本号检测是否安装成功，输入 <code>hap -V</code> ，结果显示： <code>&#39;hap&#39; 不是内部或外部命令，也不是可运行的程序或批处理文件。</code>但进到 <code>hap-toolkit</code> 目录下运行 <code>hap -V</code> ，结果正常，想着应该是环境变量没配好，就试了一下安装别的工具，果然也出现同样的问题，捣鼓了一番环境变量，还是不行。最后决定卸载nvm重新安装，于是便开始了 nvm 的安装填坑之路。此文旨在记录本人安装 nvm 的过程以及在安装过程中遇到的一点小问题。</p><h2 id="nvm的作用"><a href="#nvm的作用" class="headerlink" title="nvm的作用"></a>nvm的作用</h2><p>nvm 是 node 的版本管理工具，它能帮助你快速安装并切换使用node的版本，为什么要切换node的版本？因为各种工具使用的 node 版本可能不一致，就会出现一些奇怪的问题。比如：快应用，就需要安装6.0以上版本，官方推荐使用的是 node v6.11.3，还强调不要使用8.0.*版本，因为这个版本内部 ZipStream 实现与 node-archive 包不兼容，会引起报错。也就是说，我们在平常工作中经常会碰到使用不同 node 版本，而每次切换版本挺麻烦还耗时，你要先卸载掉当前已经安装使用的 node 版本，然后重新下载安装需要的那个版本，这个过程是繁琐的；而且为了某些功能而去反复卸载下载安装不同的 node 版本，这是非常不划算的，nvm 就是专门解决这个问题的工具。</p><h2 id="nvm的下载安装"><a href="#nvm的下载安装" class="headerlink" title="nvm的下载安装"></a>nvm的下载安装</h2><p>1.下载地址：<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">nvm的下载地址</a>（如果你已经单独安装了node，建议先卸载）。<br>2.我选择的是1.1.5版本里 <code>nvm-setup.zip</code> 这个安装包。<br>3.解压后双击安装，此处注意以下两点：  </p><img src="/20180420/nvm-install/1.png" title="This is an example image">  <p>在选择安装目录这一步的时候我选的是默认路径，记住这一步骤的路径，因为之后使用nvm安装的 node 版本都会存放在该目录下，安装完后里面有个 settings.txt 文件，之后配置环境变量的时候有用。  </p><img src="/20180420/nvm-install/2.png" title="This is an example image">  <p>接着到 <code>Set Node.js Symlink</code> 这一步，这里的目录是之后 <code>nvm use</code> 你使用的那个 node 版本程序的存放目录。我这里选的是 <code>C:\dev\nodejs</code> 。其他步骤都按默认的走，一路next直到安装完成。  </p><p>4.打开命令行窗口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nvm v   // 查看nvm版本 1.1.5</span><br><span class="line">nvm install latest  // 下载node最新版 v9.11.1</span><br><span class="line">nvm install 8.11.1  // 下载node稳定版 v8.11.1</span><br><span class="line">nvm install 6.11.3  // 下载指定版本</span><br></pre></td></tr></table></figure></p><p>下载对应的 node 版本后会在 nvm 的安装目录下生成对应的版本文件夹（即上述所说的 <code>C:\Users\ab052479\AppData\Roaming\nvm</code>），在命令行输入 <code>nvm list</code> 可以看到下载的 node 版本及当前使用的版本是 6.11.3 ，再输入 <code>nvm use 8.11.1</code> 切换使用 node v8.11.1 版本，此时再 <code>nvm list</code> 可以看到当前使用的版本已经变成 8.11.1 。这时就会在 <code>C:\dev</code> 的目录出现个 nodejs 文件夹的快捷方式。  </p><img src="/20180420/nvm-install/4.png" title="This is an example image">  <h2 id="npm的全局安装路径配置"><a href="#npm的全局安装路径配置" class="headerlink" title="npm的全局安装路径配置"></a>npm的全局安装路径配置</h2><p>执行命令:  </p><pre><code>npm config set prefix &quot;C:\dev\node\npm-global&quot;</code></pre><p>C:\Users\你的用户名\ 会生成个 .npmrc 文件，内容如下：<br><code>prefix=C:\dev\node\npm-global</code><br>这时候再去安装全局的东西，比如 <code>npm install -g hap-toolkit</code> ，所有全局的包都会出现在 <code>C:\dev\node\npm-global\node_modules</code> 目录中。  </p><h2 id="环境变量的配置"><a href="#环境变量的配置" class="headerlink" title="环境变量的配置"></a>环境变量的配置</h2><p>打开环境变量配置窗口的路径：此电脑右键 → 属性 → 高级系统设置 → 环境变量。  </p><img src="/20180420/nvm-install/5.png" title="This is an example image"><ul><li>用户变量<br><code>NVM_HOME</code> 的值设成 <code>C:\dev\node\npm-global</code> ， <code>NVM_SYMLINK</code> 的值设成 <code>C:\dev\nodejs</code>, <code>path</code> 需要有 <code>%NVM_HOME%</code> 和 <code>%NVM_SYMLINK%</code> 。  </li></ul><img src="/20180420/nvm-install/6.png" title="This is an example image"><ul><li>系统变量<br><code>NVM_HOME</code> 的值设成 <code>C:\dev\node\npm-global</code> ， <code>NVM_SYMLINK</code> 的值设成 <code>C:\dev\nodejs</code>, <code>path</code> 需要有 <code>%NVM_HOME%</code> 和 <code>%NVM_SYMLINK%</code> 。<br>在 <code>path</code>的最后再配上一条 <code>C:\Users\ab052479\AppData\Roaming\nvm</code> ，这样就可以全局使用 nvm 了。<br>然而，当我在D盘某个项目里打开命令行使用 nvm 操作时，报错了：<br><code>ERROR open C:\dev\node\npm-global\settings.txt: The system cannot find the file specified.</code><br>不过别慌，人家已经给你报出是什么原因了：该路径下找不到 settings.txt 这个文件。<br>这时，你只需要去 nvm 的安装路径 <code>C:\Users\ab052479\AppData\Roaming\nvm</code> 下把 settings.txt 文件复制到 <code>C:\dev\node\npm-global</code> 就行了（记得关掉命令行窗口重新开一个再试）。  </li></ul><img src="/20180420/nvm-install/7.png" title="This is an example image">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一直以来都在用 nvm 来管理我的 node 的版本，然而，最近在尝试入坑快应用时，使用 &lt;code&gt;npm install -g hap-toolkit&lt;/code&gt; 安装快应用脚手架，接着查看版本号检测是否安装成功，输入 &lt;code&gt;hap -V&lt;/code&gt; ，结果显
      
    
    </summary>
    
    
      <category term="nvm" scheme="https://mayner.github.io/tags/nvm/"/>
    
      <category term="win10" scheme="https://mayner.github.io/tags/win10/"/>
    
      <category term="node.js" scheme="https://mayner.github.io/tags/node-js/"/>
    
  </entry>
  
</feed>
